name: Build Nightly Releases
on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      CC_aarch64_unknown_linux_musl: clang
      AR_aarch64_unknown_linux_musl: llvm-ar
      CFLAGS_aarch64_unknown_linux_musl: -nostdinc -nostdlib -isystem/usr/include/x86_64-linux-musl/ -isystem/usr/include/clang/14/include
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl

    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-
            ${{ runner.os }}-

      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable
          rustup target add --toolchain stable ${{ matrix.target }}

      - name: Install clang for cross-build
        if: ${{ !startsWith( matrix.target , 'x86_64-unknown-linux' ) }}
        run: |
          sudo apt-get update -y
          sudo apt-get install clang llvm libclang-dev llvm-dev -y

      - name: Install musl-tools for targeting musl
        if: ${{ endsWith( matrix.target , 'musl' ) }}
        run: |
          sudo apt-get install musl-tools

      - name: Build ${{ matrix.target }}
        timeout-minutes: 120
        run: |
          TARGET=${{ matrix.target }}

          if [[ "$TARGET" == *"-linux-"* || "$TARGET" == *"-apple-"* ]]; then
            TARGET_FEATURES="local-redir local-tun"
          fi

          if [[ "$TARGET" == "mips-"* || "$TARGET" == "mipsel-"* || "$TARGET" == "mips64-"* || "$TARGET" == "mips64el-"* ]]; then
            sudo apt-get update -y && sudo apt-get install -y upx;
            if [[ "$?" == "0" ]]; then
              USE_UPX=true
              if [[ -z "$upx" ]] && command -v upx &> /dev/null; then
                upx="upx -9"
              fi
              if [[ "x$upx" == "x" ]]; then
                echo "Couldn't find upx in PATH, consider specifying it with variable \$upx"
                exit 1
              fi
            fi
          fi

          VERSION=$(grep -E '^version' Cargo.toml | awk '{print $3}' | sed 's/"//g')
          PROJECT_ROOT_DIR=$(pwd)
          RELEASE_DIR="${PROJECT_ROOT_DIR}/target/${TARGET}/release"
          
          if [[ "${TARGET_FEATURES}" != "" ]]; then
            echo "* Building $TARGET package $VERSION with features \"$TARGET_FEATURES\" ..."
            cargo build \
              --target "$TARGET" \
              --features "$TARGET_FEATURES" \
              --bin ssurl --bin ssmanager --bin ssservice \
              --release
          else
            echo "* Building $TARGET package $VERSION ..."
            cargo build \
              --target "$TARGET" \
              --bin ssurl --bin ssmanager --bin ssservice \
              --release
          fi
          
          if [[ $? != "0" ]]; then
            exit 1
          fi

          cd ${RELEASE_DIR}
          
          if [[ "${USE_UPX}" = true ]]; then
            # Enable upx for MIPS.
            $upx ssurl ssmanager ssservice #>/dev/null
          fi

          PKG_DIR="${PROJECT_ROOT_DIR}/build/release"
          PKG_NAME="shadowsocks-v${VERSION}.${TARGET}.tar.xz"
          PKG_PATH="${PKG_DIR}/${PKG_NAME}"

          mkdir -p "${PKG_DIR}"

          echo "* Packaging XZ in ${PKG_PATH} ..."
          tar -cJf ${PKG_PATH} "ssurl" "ssmanager" "ssservice"

          if [[ $? != "0" ]]; then
            exit 1
          fi

          cd -
          cd "${PKG_DIR}"
          shasum -a 256 "${PKG_NAME}" > "${PKG_NAME}.sha256"
          echo "* Done build package ${PKG_NAME}"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: build/release/*

  build-unix:
    runs-on: ${{ matrix.os }}
    env:
      BUILD_EXTRA_FEATURES: "local-redir local-tun"
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v3

      - name: Install GNU tar
        if: runner.os == 'macOS'
        run: |
          brew install gnu-tar
          # echo "::add-path::/usr/local/opt/gnu-tar/libexec/gnubin"
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-
            ${{ runner.os }}-

      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable
          rustup target add --toolchain stable ${{ matrix.target }}

      - name: Build release
        shell: bash
        run: |
          ./build/build-host-release -t ${{ matrix.target }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: build/release/*

  build-windows:
    runs-on: windows-latest
    env:
      RUSTFLAGS: "-C target-feature=+crt-static"
      RUST_BACKTRACE: full
    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable

      - name: Build release
        run: |
          pwsh ./build/build-host-release.ps1

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-native
          path: build/release/*
